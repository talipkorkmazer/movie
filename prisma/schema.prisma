// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  username     String         @unique
  password     String
  age          Int
  roleId       String
  updatedAt    DateTime       @updatedAt
  createdAt    DateTime       @default(now())
  Role         Role?          @relation(fields: [roleId], references: [id])
  Ticket       Ticket[]
  WatchHistory WatchHistory[]
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  updatedAt   DateTime         @updatedAt
  createdAt   DateTime         @default(now())
  User        User[]
  Permissions RolePermission[]
}

model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  updatedAt   DateTime         @updatedAt
  createdAt   DateTime         @default(now())
  Roles       RolePermission[]
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
  assignedAt   DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([roleId, permissionId])
}

model Movie {
  id             String         @id @default(uuid())
  name           String         @unique
  ageRestriction Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Sessions       Session[]
  WatchHistory   WatchHistory[]
}

model Session {
  id           String         @id @default(uuid())
  movieId      String
  date         DateTime
  timeSlot     String
  roomNumber   Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Tickets      Ticket[]
  Movie        Movie          @relation(fields: [movieId], references: [id], onDelete: Cascade)
  WatchHistory WatchHistory[]

  @@unique([movieId, date, timeSlot, roomNumber])
}

model Ticket {
  id           String   @id @default(uuid())
  userId       String
  sessionId    String
  isUsed       Boolean  @default(false)
  purchaseDate DateTime @default(now())
  User         User     @relation(fields: [userId], references: [id])
  Session      Session  @relation(fields: [sessionId], references: [id])
}

model WatchHistory {
  id        String   @id @default(uuid())
  userId    String
  movieId   String
  sessionId String
  watchedAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  Movie     Movie    @relation(fields: [movieId], references: [id])
  Session   Session  @relation(fields: [sessionId], references: [id])
}
